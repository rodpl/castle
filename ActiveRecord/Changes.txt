beta 4
======

- Added support for generic abstract base class for a type hierarchy per discussions with Don
  Morrison on IRC. The Generic Abstract Base class must conform to all the previous rules to 
  implement an abstract base class in a type hierarchy.

  When initializing the class using the ActiveRecordStarter, you must use syntax similar to the
  following:

    ActiveRecordStarter.Initialize( GetConfigSource(),
      typeof(Model.GenericModel.Entity<>), 
      typeof(CompanyEntity), 
      typeof(PersonEntity));

  Please see the GenericJoinedSubClassTestCase.cs for an example.

  All rules about covariance and contravariance still apply.

- Applied Michael Morton's patch adding support to NHibernate's INamingStrategy. 
  This allow one to associate an implementation of INamingStrategy
  through an attribute 'namingstrategytype' on activerecord config node

- Applied suggestion from Gokhan Altinoren fixing AR-77
  "VisitPrimaryKey fails to generate correct <generator> xml 
  element for PrimaryKeyType.Identity when the system culture is set to Turkish"

- Applied Michael Morton's patch fixing AR-76
  "SemanticVerifierVisitor Issue With NHibernate User Types"

- Refactored CompositeKey support. Now instead of using 

    [PrimaryKey]
    public SomeClass Id { get/set }
  
    [CompositeKey]
    public class SomeClass { ...
  
  You should use

    [CompositeKey]
    public SomeClass Id { get/set }
	
  The old way is still supported though.

- Applied Freyr Magnússon's patch fixing AR-75 
  "SemanticVerifierVisitor causing fauly xml when using composit key"

- Added support for "ColumnPrefix" on [Nested] attribute. This change allows
  a better usage of components, such as:

    public class Name {
      private String first, last;
      
      [Property("first_name")] public string First { ... }
      [Property("last_name")] public string Last { ... }
    }
    
    [ActiveRecord("children")]
    public class Child {
      private Name name, fatherName, motherName;
      
      /* maps to database columns: first_name and last_name */
      [Nested] Name Name { ... }
      
      /* maps to database columns: father_first_name and father_last_name */
      [Nested(ColumnPrefix="father_")] Name FatherName { ... }
      
      /* maps to database columns: mother_first_name and mother_last_name */
      [Nested(ColumnPrefix="mother_")] Name MotherName { ... }
    }

- Review OneToOneAttribute test case, added one more unit test

- Removed OuterJoin attribute from OneToOneAttribute, replaced by Fetch property

- Added PropertyRef to OneToOneAttribute

- Applied patch to patch from josh robb - FindAllByProperty now handles null values internallly.

- Applied patch from josh robb - FindAllByProperty now handles null values internallly.

- Applied Freyr Magnússon's patch fixing misbehave related to abstract classes that defines different
  database boundaries: "ActiveRecordStarter Initialize method assembply overloads fail 
  to add derived base types from config"

- Applied josh robb's patch "small fixup for length 
  validator error messages where there is only a minimum or maximum specified"

- Fixed AR-73: "Dynamic type adding after initialization"

- Added some logging. That's just a start: the idea is to increase AR verbosity 
  in order to reduce the need of debugging to diagnose problems.

- Refactored ActiveRecordStarter.Initialize to use ActiveRecordSectionHandler.Instance

- Introduced ActiveRecordSectionHandler.Instance to avoid repetitive code.
  Now, instead of
  
  IConfiguration source = (IConfiguration) ConfigurationSettings.GetSection("activerecord");
  
  (or similar) you can use
  
  IConfiguration source = ActiveRecordSectionHandler.Instance;
  
  Bare in mind that it looks for a section named "activerecord" on the configuration
  file associated with the AppDomain, and throws an exception if it cannot be found.

- Applied Marc-Andre's patch fixing AR-68
  "Make ActiveRecordValidation.ValidationErrorMessages virtual to simplify localisation"

- Added SessionScope.Current static property to gain access to the
  current ISessionScope implementation

- Changed ISessionScope:
    Added FlushAction property
    Added Flush method to allow people to have more control on when to flush

- Applied patch by Michael Morton <mmorton@wickednite.com>. Quoting explanation:

Since the generic base class varies with the type parameter 
(i.e. ActiveRecordBase<One> is not the same as ActiveRecordBase<Two>) 
there is no easy way to specify multiple configurations using the 
"type=" attribute.  There is also no easy way to create multiple 
subclasses as the documentation suggests for when using the non 
generic base class.

However, there is an easy fix for this.  Even though, for example, 
these two base types are "different", ActiveRecordBase<One> and 
ActiveRecordBase<Two>, they share the same generic type definition, 
namely "ActiveRecordBase`1".  With a small change to the function 
"GetRootType" in "SessionFactoryHolder.cs" to make it look at the 
generic type definition when dealing with a generic type, instead 
of the generic type itself, you can once again easily access multiple databases.

Usage:
You can now create multiple base types for each of your databases, such as...

class MyBaseOne<T> : ActiveRecordBase<T> { }
class MyBaseTwo<T> : ActiveRecordBase<T> { }

... and then specify config for each by using the "type=" attribute like so ...

<config type="MyBaseOne`1, MyAssembly">
</config>
<config type="MyBaseTwo`1, MyAssembly">
</config>

Any subclasses of those will then get the correct configuration 
settings.  I have been using this change in my own builds for a 
couple weeks now and it seems to be working ok.  I have not 
written any tests specifically for it, yet, but wanted to get 
it out there in case anyone was interested.

- Applied patch by Brian Romanko <me@brianromanko.com> allowing the use 
  of different type for a Nested type (what NHibernate refers as a Component)

- Fixed AR-65: ActiveRecordBase<T> prevent users from using type inheritance
  Refactored ActiveRecordBase<T> to extend ActiveRecordBase
  Refactored ActiveRecordMediator<T> to extend ActiveRecordMediator
  Could not do the same thing for the validation<T>

- Removed dependency on the Nullables library.

- Added native support for .NET 2.0 Nullables.

- Applied Brian Romanko <me@brianromanko.com> patch fixing enum support

- Fixed AR-62: DifferentDatabaseScope not switching between databases

- Introduced HybridWebThreadScopeInfo which, as the name implies, 
  uses both strategies to handle scope storage. Useful only for some complex scenarios

- Added support for RelationType.List.

- Simplified Exists<PkType> method on ActiveRecordBase<T>.

- Fixed AR-46 - OneToOne Attribute Does Not Support Specifying a Target Type
  Added property MapType to OneToOne attribute

- Added ActiveRecordStarter.ResetInitializationFlag. Useful for test cases 
  that invoke Initialize multiple times

- Fixed AR-52 - Dont allow one to invoke Initialize more than once

- Added some flexibility into ActiveRecord Queries. They are now mutable,
  which means we now have methods like 'SetParameter', 'SetParameterList' and
  'SetRange'; and the 'Query' property is now read-write.

- Added support for query modifiers in ActiveRecord Queries. Any object implementing
  IQueryModifier can be added to an ActiveRecordBaseQuery, using the 
  (protected) 'AddModifier' method. Parameters and query ranges 
  are implemented as query modifiers.

- Fixed AR-39: Added virtual to IsValid on ActiveRecordValidationBase/<T>

- Fixed AR-45: Added BindingFlags.NonPublic to DefaultBindingFlags on ActiveRecordModelBuilder

- Added Element to RelationAttribute, now can map relations of simple types
   Usage:
	 [HasMany(typeof(string), "ItemId", "Elements", Element = "Name")]

- Applied Antonio's patches 
  See http://forum.castleproject.org/posts/list/457.page and 
      http://forum.castleproject.org/posts/list/566.page

- Added Debug to IConfiguration Source. If set then XmlGenerationVisitor will save nhibernate mapping files to the AppDomain.BaseDirectory. 
  Usage: if you're the XmlConfigurationSource or the Section add the isDebug="true" attribute

- Added support to CompositeKeys as Foreign Keys (kudos to G. Richard Bellamy)

  BelongsToAttribute - Added CompositeKeyColumns property.
  HasAndBelongsToManyAttribute - Added CompositeKeyColumnKeys and CompositeKeyColumnRefs.
  HasManyAttribute - Added CompositeKeyColumnKeys.
  VersionAttribute - Added support for UnsavedValue.
  SemanticVerifierVisitor - Added checks to ensure the composite key attributes are used properly.
  XmlGenerationVisitor - Added output to support mapping the composite key attributes, as well as the unsaved-value attribute for Version.
 
  In general, the changes are motivated by the need to have AR map to 
  legacy data, where composite keys are used as both primary and foreign 
  keys. The current AR support for CompositeKeys does not support 
  associations, this patch does.
 
  There are some caveats when using this, which are driven by the NH 
  implementation. An assigned identifier (like all CompositeKeys and 
  many string PrimaryKeys) cannot be used to determine whether an instance 
  is detached or transient - since it's assigned by the application, it's 
  never null. Therefore, you must use another strategy, NH will misbehave 
  around the way it persists the instance to the database. That is why the 
  VersionAttribute had to have the support for UnsavedValue - the UnsavedValue 
  property of the Version is used by NH to determine the state of the instance.
 
  For a discussion of the appropriate mappings and usage, see "Hibernate in Action," pgs. 330 - 335.

- Added SessionScopeWebModule which hooks BeginRequest and EndRequest initializing and 
  destructing a SessionScope properly. In order to use it add to httpModules section 
  (web.config):
  
  <system.web>
    <httpModules>
      <add name="ar.sessionscope" type="Castle.ActiveRecord.Framework.SessionScopeWebModule, Castle.ActiveRecord" />
    </httpModules>
  </system.web>

- Added lifecycle methods that can be overriden:

  . OnSave
  . OnUpdate
  . OnLoad(id)
  . OnDelete

- Applied patch from Ahmed Ghandour <aghandour@rydexinvestments.com> adding the methods
  FetchCount and Exists to ActiveRecordBase

- Applied patch from Dave Godfrey fixing nested classes with relations problems (http://forum.castleproject.org/posts/list/457.page)

- Fixed a stack overflow exception when using IsUnique inside a session scope.

- You can now apply IsUnique to a property that also has PrimaryKey on it without problem.

- Resolved IsUnique bug with ActiveRecordValidationBase<> (it was non functional)

- Resolved test bugs with IsUnique for .net 1 and .net 2.

- Refactored query support:
  - Introduced generic interface IActiveRecordQuery<T>, extending IActiveRecordQuery, for strongly-typed Execute() method support;
  - Added IActiveRecordQuery.Enumerate(), for memory-intensive queries;
  - Introduced HqlBasedQuery, decoupling ActiveRecordBaseQuery from HQL usage;

- Added ValidateCreditCard validation attribute.

- Added ValidateLength validation attribute.

- Added support for .Net 2.0 Connection Strings in the config file, using this method:

<activerecord>
	<add key="hibernate.connection.connection_string" value="ConnectionString = ${ConnectionStringKey}" />
</activerecord>

<connectionStrings>
	<add name="ConnectionStringKey" connectionString="The Connection String"/>
</connectionStrings>

This allows to take advantage of the connection string encryption as well as manage them using the built in tools.

- Added Exists<PkType>(PkType id) support to allow for checking of an object's existance 
  in the datastore.

- Brought ActiveRecordBase.Generic inline with ActiveRecordBase feature wise.  
  Public Static Methods are now present on all ActiveRecordBase.Generic objects for common tasks such as Find, FindAll, etc.

  <This is a breaking change.>
  
- Added support for NHibernate dynamic-update, dynamic-insert to ActiveRecordAttribute

- Simplified NHibernate markup generation for testing

  Attributes are now written in one of two ways. Tags that have both an open and close 
  will have no space at the end of the attributes on the opening tag, while tags that 
  have no contents (<tag />) will be written with one space after the last attribute.
  
  Examples:
  
  <openclose attrib="test" attrib2="test"></openclose>
  
  <noclosetag attrib="test"/>

- Added ActiveRecordValidationBase<> to support validation on Generic AR classes

- Updated DeleteAll(Type targetType, IEnumerable pkValues) to support non int primary keys

- Add more hookable methods.

- Refactored Validation support to use NHibernate.IValidatable

- Brought ActiveRecordMediator.Generic inline with ActiveRecordMediator.  This is a breaking 
  change (removal of a few methods/renaming of a few existing).

- Add import support (kudos to Dan Burnea)
  [ActiveRecord, Import(typeof(ImportClassRow), "ImportClassRow")]
  public class ImportClass : ActiveRecordBase

beta 3
======

- Added FindAllByProperty, FindFirst and FindOne

- Added DeleteAll(type, where) (kudos to G. Richard Bellamy)

- Applied patch from Josh Robb. Added support for hooks on ActiveRecordBase<T>.

- DifferentDatabaseScope: so you can open a session using a different dbconnection
  and persist your object model. Very experimental version

- Fixed: Support for multiple databases was completely broken.

- An implementation of ISessionFactoryHolder can be specified through the configuration, attribute sessionfactoryholdertype
  on the config node.

- Added: ActiveRecordBase<T> - a generic form a ActiveRecordBase which relieves the need to re-write
  all the base static methods to hide the type parameter and cast the result. Generics do it for you.

- Added: ActiveRecordStarter.CreateSchemaFromFile(filename) as an alternative to CreateSchema. 

- Added: Support for composite keys - composite key class must be serializable and implement both Equals and GetHashCode.
  Not complete support, missing the NHibernate key-many-to-one element in the composite key.
  
- Added: Support for Lazy loading class using BelongsTo. Will throw if there is a non virtual property that
  also BelongsTo().

- Closed: (AR-24) ValidationException must contain the validation error messages

- Support for fields in addition to properties

- Added [Any], [Any.MetaValue] and [HasManyToAny] attributes.

- Small improvement on ActiveRecordModelBuilder (less intensive on IsDefined/GetCustomAttribute)

- IThreadScopeInfo introduced. Two implementations: ThreadScopeInfo and WebThreadScopeInfo. 
  ThreadScopeInfo is the default implementation. You can use WebThreadScopeInfo by simply using 
  isWeb="true" on the configuration node:
  
  <config isWeb="true">
    ..
  
  Or you can provide your own implementation specifying the full type name

  <config threadinfotype="my.threadinfotype, my.assembly">
    ..

beta 2
======

- Transaction support: lots of minor fixes

- Added support for map relations. 
  Necessary to specify Index and IndexType on the HasMany (or HasAndBelongsToMany)

- IsUnique validator fix
  

Version 0.0.1.5
===============
  
  Inner workings fully rewritten, better test cases coverage

  Added SlicedFindAll


Version 0.0.1.4
===============

  Implemented support for Joined Subclasses

  Implemented initial support for validations


Version 0.0.1.3
===============

  Applied patch from John Morales (support for idbags)


Version 0.0.1.2
===============

  Applied patch from John Morales (support for sets)

  Applied suggestion and fixes from "jianxiao jiang" <jiangjianxiao@gmail.com> (NHibernateDelegate)


Version 0.0.1.1
===============
  
  Applied patch from Luiz César Kuriki <luizck@gmail.com> in order to support NHibernate's Component feature
  
  Applied modification suggested by Andrew Hallock and Craig Neuwirt in order to support HasOne relations.


Version 0.0.1.0 
===============

  Released (not changes to track yet)

