<?xml version="1.0" ?>
<project name="avalon-framework-helper" xmlnds="http://tempuri.org/nant-vs.xsd">

    <target name="compile-runtime" description="Compile all build configurations for the current runtime configuration"
        depends="check-current-runtime-config, check-current-runtime-version">

        <echo message="Compiling all build configurations for the ${current.runtime.config}-${current.runtime.version} runtime configuration." />
        <call target="set-debug-build-configuration" />
        <!-- make sure that the runtime properties that rely on build configuration information are refreshed -->
        <call target="set-runtime-configuration" />
        <call target="compile-${current.runtime.config}-${current.runtime.version}" />
        <call target="set-release-build-configuration" />
        <!-- make sure that the runtime properties that rely on build configuration information are refreshed -->
        <call target="set-runtime-configuration" />
        <call target="compile-${current.runtime.config}-${current.runtime.version}" />
    </target>

    <target name="compile-build" description="Compile current build configurations for all runtime configurations">
        <echo message="Compiling all runtime configurations for the ${current.build.config} build configuration." />
        <available type="Framework" resource="net-1.0" property="temp.framework.available" />
        <if propertytrue="temp.framework.available">
            <call target="set-net-1.0-runtime-configuration" />
            <call target="compile-${current.runtime.config}-${current.runtime.version}" />
        </if>
        <ifnot propertytrue="temp.framework.available">
            <if propertyexists="project.build.package" propertytrue="project.build.package">
                <fail message="The .NET Framework 1.0 is not available." />
            </if>
            <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                <echo message="The .NET Framework 1.0 is not available. Build skipped." />
            </ifnot>
        </ifnot>
        <available type="Framework" resource="net-1.1" property="temp.framework.available" />
        <if propertytrue="temp.framework.available">
            <call target="set-net-1.1-runtime-configuration" />
            <call target="compile-${current.runtime.config}-${current.runtime.version}" />
        </if>
        <ifnot propertytrue="temp.framework.available">
            <if propertyexists="project.build.package" propertytrue="project.build.package">
                <fail message="The .NET Framework 1.1 is not available." />
            </if>
            <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                <echo message="The .NET Framework 1.1 is not available. Build skipped." />
            </ifnot>
        </ifnot>
        <available type="Framework" resource="mono-1.0" property="temp.framework.available" />
        <if propertytrue="temp.framework.available">
            <call target="set-mono-1.0-runtime-configuration" />
            <call target="compile-${current.runtime.config}-${current.runtime.version}" />
        </if>
        <ifnot propertytrue="temp.framework.available">
            <if propertyexists="project.build.package" propertytrue="project.build.package">
                <fail message="Mono 1.0 is not available." />
            </if>
            <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                <echo message="Mono 1.0 is not available. Build skipped." />
            </ifnot>
        </ifnot>
        <available type="Framework" resource="sscli-1.0" property="temp.framework.available" />
        <if propertytrue="temp.framework.available">
            <call target="set-sscli-1.0-runtime-configuration" />
            <call target="compile-${current.runtime.config}-${current.runtime.version}" />
        </if>
        <ifnot propertytrue="temp.framework.available">
            <if propertyexists="project.build.package" propertytrue="project.build.package">
                <fail message="SSCLI 1.0 is not available." />
            </if>
            <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                <echo message="SSCLI 1.0 is not available. Build skipped." />
            </ifnot>
        </ifnot>
    </target>

    <target name="compile" description="Builds the current build configuration for the current runtime configuration."
        depends="check-current-build-config, check-current-runtime-config, check-current-runtime-version">
        <call target="compile-${current.runtime.config}-${current.runtime.version}" />
    </target>

    <target name="compile-net-1.0" description="Builds .NET Framework 1.0 version" depends="set-net-1.0-runtime-configuration, check-avalon-framework-basedir">
        <!-- make sure the current binaries directory exists and is cleaned -->
        <call target="clean-current-bin-dir" />
        <!-- initialize the temp.build.skip property to false -->
        <property name="temp.build.skip" value="false" readonly="false" />
        <if propertytrue="current.build.config.release">
            <!-- check if the Avalon key file is available -->
            <available type="File" resource="${avalon-framework.basedir}/${avalon-framework.key}" property="temp.avalon.keyfile.available" />
            <ifnot propertytrue="temp.avalon.keyfile.available">
                <if propertyexists="project.build.package" propertytrue="project.build.package">
                    <fail message="Key file not found." />
                </if>
                <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                    <echo message="Key file not found. You can generate a key file by running 'sn -k ${avalon-framework.key}'." />
                    <echo message="The generated key file should be stored in the Avalon Framework base directory." />
                    <echo message="The release build will be skipped." />
                    <property name="temp.build.skip" value="true" readonly="false" />
                </ifnot>
            </ifnot>
            <if propertytrue="temp.avalon.keyfile.available">
                <!-- copy the Avalon key file to the location where the compiler expects it to be -->
                <copy file="${avalon-framework.basedir}/${avalon-framework.key}" todir="${current.bin.dir}/../../../" if="${current.build.config.release}" />
            </if>
        </if>
        <ifnot propertytrue="temp.build.skip">
            <csc nostdlib="true" noconfig="true" warnaserror="false" target="library" debug="${current.build.debug}"
                define="${current.build.defines.csc}" output="${current.bin.dir}/${avalon-framework.assembly}" doc="${current.bin.dir}/${avalon-framework.doc}">
                <sources basedir="${avalon-framework.src}" defaultexcludes="true">
                    <includes name="**/*.cs" />
                </sources>
                <references defaultexcludes="true">
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/mscorlib.dll"
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.dll" 
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.Xml.dll"
                        fromPath="false" />
                    <!-- allow for third party assemblies to be referenced by just storing them in the lib/<framework>/<framework version>/<build configuration> directory -->
                    <includes name="lib/${current.runtime.config}/${current.runtime.version}/${current.build.config}/*.dll"
                        fromPath="false" />
                </references>
            </csc>
        </ifnot>
        <!-- Execute the testcases -->
        <call target="run-tests" />
    </target>

    <target name="compile-net-1.1" description="Builds .NET Framework 1.1 version" depends="set-net-1.1-runtime-configuration, check-avalon-framework-basedir">
        <!-- make sure the current binaries directory exists and is cleaned -->
        <call target="clean-current-bin-dir" />
        <!-- initialize the temp.build.skip property to false -->
        <property name="temp.build.skip" value="false" readonly="false" />
        <if propertytrue="current.build.config.release">
            <!-- check if the Avalon key file is available -->
            <available type="File" resource="${avalon-framework.basedir}/${avalon-framework.key}" property="temp.avalon.keyfile.available" />
            <ifnot propertytrue="temp.avalon.keyfile.available">
                <if propertyexists="project.build.package" propertytrue="project.build.package">
                    <fail message="Key file not found." />
                </if>
                <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                    <echo message="Key file not found. You can generate a key file by running 'sn -k ${avalon-framework.key}'." />
                    <echo message="The generated key file should be stored in the Avalon Framework base directory." />
                    <echo message="The release build will be skipped." />
                    <property name="temp.build.skip" value="true" readonly="false" />
                </ifnot>
            </ifnot>
            <if propertytrue="temp.avalon.keyfile.available">
                <!-- copy the Avalon key file to the location where the compiler expects it to be -->
                <copy file="${avalon-framework.basedir}/${avalon-framework.key}" todir="${current.bin.dir}/../../../" if="${current.build.config.release}" />
            </if>
        </if>
        <ifnot propertytrue="temp.build.skip">
            <csc nostdlib="true" noconfig="true" warnaserror="false" target="library" debug="${current.build.debug}"
                define="${current.build.defines.csc}" output="${current.bin.dir}/${avalon-framework.assembly}" doc="${current.bin.dir}/${avalon-framework.doc}">
                <sources basedir="${avalon-framework.src}" defaultexcludes="true">
                    <includes name="**/*.cs" />
                </sources>
                <references defaultexcludes="true">
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/mscorlib.dll"
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.dll" 
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.Xml.dll"
                        fromPath="false" />
                    <!-- allow for third party assemblies to be referenced by just storing them in the lib/<framework>/<framework version>/<build configuration> directory -->
                    <includes name="lib/${current.runtime.config}/${current.runtime.version}/${current.build.config}/*.dll"
                        fromPath="false" />
                </references>
            </csc>
        </ifnot>
        <!-- Execute the testcases -->
        <call target="run-tests" />
    </target>

    <target name="compile-mono-1.0" description="Builds Mono 1.0 version" depends="set-mono-1.0-runtime-configuration, check-avalon-framework-basedir">
        <!-- make sure the current binaries directory exists and is cleaned -->
        <call target="clean-current-bin-dir" />
        <!-- initialize the temp.build.skip property to false -->
        <property name="temp.build.skip" value="false" readonly="false" />
        <if propertytrue="current.build.config.release">
            <!-- check if the Avalon key file is available -->
            <available type="File" resource="${avalon-framework.basedir}/${avalon-framework.key}" property="temp.avalon.keyfile.available" />
            <ifnot propertytrue="temp.avalon.keyfile.available">
                <if propertyexists="project.build.package" propertytrue="project.build.package">
                    <fail message="Key file not found." />
                </if>
                <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                    <echo message="Key file not found. You can generate a key file by running 'sn -k ${avalon-framework.key}'." />
                    <echo message="The generated key file should be stored in the Avalon Framework base directory." />
                    <echo message="The release build will be skipped." />
                    <property name="temp.build.skip" value="true" readonly="false" />
                </ifnot>
            </ifnot>
            <if propertytrue="temp.avalon.keyfile.available">
                <!-- copy the Avalon key file to the location where the compiler expects it to be -->
                <copy file="${avalon-framework.basedir}/${avalon-framework.key}" todir="${current.bin.dir}/../../../" if="${current.build.config.release}" />
            </if>
        </if>
        <ifnot propertytrue="temp.build.skip">
            <csc nostdlib="false" noconfig="true" warnaserror="false" target="library" debug="${current.build.debug}"
                define="${current.build.defines.csc}" output="${current.bin.dir}/${avalon-framework.assembly}">
                <sources basedir="${avalon-framework.src}" defaultexcludes="true">
                    <includes name="**/*.cs" />
                </sources>
                <references defaultexcludes="true">
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/mscorlib.dll"
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.dll" 
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.Xml.dll"
                        fromPath="false" />
                    <!-- allow for third party assemblies to be referenced by just storing them in the lib/<framework>/<framework version>/<build configuration> directory -->
                    <includes name="lib/${current.runtime.config}/${current.runtime.version}/${current.build.config}/*.dll"
                        fromPath="false" />
                </references>
            </csc>
        </ifnot>
        <!-- Execute the testcases -->
        <call target="run-tests" />
    </target>

    <target name="compile-sscli-1.0" description="Builds SSCLI 1.0 version" depends="set-sscli-1.0-runtime-configuration, check-avalon-framework-basedir">
        <!-- make sure the current binaries directory exists and is cleaned -->
        <call target="clean-current-bin-dir" />
        <!-- initialize the temp.build.skip property to false -->
        <property name="temp.build.skip" value="false" readonly="false" />
        <if propertytrue="current.build.config.release">
            <!-- check if the Avalon key file is available -->
            <available type="File" resource="${avalon-framework.basedir}/${avalon-framework.key}" property="temp.avalon.keyfile.available" />
            <ifnot propertytrue="temp.avalon.keyfile.available">
                <if propertyexists="project.build.package" propertytrue="project.build.package">
                    <fail message="Key file not found." />
                </if>
                <ifnot propertyexists="project.build.package" propertytrue="project.build.package">
                    <echo message="Key file not found. You can generate a key file by running 'sn -k ${avalon-framework.key}'." />
                    <echo message="The generated key file should be stored in the Avalon Framework base directory." />
                    <echo message="The release build will be skipped." />
                    <property name="temp.build.skip" value="true" readonly="false" />
                </ifnot>
            </ifnot>
            <if propertytrue="temp.avalon.keyfile.available">
                <!-- copy the Avalon key file to the location where the compiler expects it to be -->
                <copy file="${avalon-framework.basedir}/${avalon-framework.key}" todir="${current.bin.dir}/../../../" if="${current.build.config.release}" />
            </if>
        </if>
        <ifnot propertytrue="temp.build.skip">
            <csc nostdlib="true" noconfig="true" warnaserror="false" target="library" debug="${current.build.debug}"
                define="${current.build.defines.csc}" output="${current.bin.dir}/${avalon-framework.assembly}">
                <sources basedir="${avalon-framework.src}" defaultexcludes="true">
                    <includes name="**/*.cs" />
                </sources>
                <references defaultexcludes="true">
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/mscorlib.dll"
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.dll" 
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.Xml.dll"
                        fromPath="false" />
                    <!-- allow for third party assemblies to be referenced by just storing them in the lib/<framework>/<framework version>/<build configuration> directory -->
                    <includes name="lib/${current.runtime.config}/${current.runtime.version}/${current.build.config}/*.dll"
                        fromPath="false" />
                </references>
            </csc>
        </ifnot>
        <!-- Execute the testcases -->
        <call target="run-tests" />
    </target>

    <target name="compile-tests" description="Compile test cases">
        <echo message="NAnt location is ${nant.location}" />
        <csc nostdlib="true" noconfig="true" warnaserror="false" target="library" debug="${current.build.debug}"
            define="${current.build.defines.csc}" output="${current.bin.dir}/${avalon-framework.test.assembly}">
            <sources basedir="${avalon-framework.test.src}" defaultexcludes="true">
                <includes name="**/*.cs" />
            </sources>
            <references defaultexcludes="true">
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/mscorlib.dll"
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.dll" 
                        fromPath="false" />
                    <includes name="${nant.settings.currentframework.frameworkassemblydirectory}/System.Xml.dll"
                        fromPath="false" />
                <includes name="${nant.location}/nunit.framework.dll"
                    fromPath="false" />
                <includes name="${current.bin.dir}/${avalon-framework.assembly}" fromPath="false" />
                <!-- allow for third party assemblies to be referenced by just storing them in the lib/<framework>/<framework version>/<build configuration> directory -->
                <includes name="lib/${current.runtime.config}/${current.runtime.version}/${current.build.config}/*.dll"
                    fromPath="false" />
            </references>
        </csc>
    </target>

</project>
