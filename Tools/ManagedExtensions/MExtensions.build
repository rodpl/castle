<?xml version="1.0" encoding='iso-8859-1' ?>
<project name="mextensions" default="build">

	<property name="base.dir" value="." />
	<property name="bin.dir" value="${base.dir}/bin" />
	<property name="lib.dir" value="${base.dir}/lib" />
	<property name="doc.dir" value="${base.dir}/doc" />
	<property name="src.dir" value="${base.dir}" />

	<property name="core.src.dir" value="${src.dir}/ManagementExtensions" />
	<property name="core.test.src.dir" value="${src.dir}/ManagementExtensionsTest" />
	<property name="core.name" value="Castle.ManagementExtensions" />
	<property name="core.assembly.name" value="${core.name}.dll" />
	<property name="core.test.assembly.name" value="${core.name}.Test.dll" />

	<property name="debug" value="false" />
	<property name="optimize" value="true" />
	<property name="version" value="aplha-1" />

	<!-- find out where nunit.framework.dll is -->
	<property name="nant.lib.dir"
		value="${path::combine(nant::get-base-directory(), 'lib')}"
		dynamic="true" />
		
	<property name="nant.lib.family.dir"
		value="${path::combine(nant.lib.dir,framework::get-family(framework::get-target-framework()))}"
		dynamic="true" />
		
	<property name="nant.lib.framework.dir"
		value="${path::combine(nant.lib.family.dir, framework::get-version(framework::get-target-framework()))}"
		dynamic="true" />
		
	<property name="nunit.framework.dll"
			value="${path::combine(nant.lib.framework.dir, 'nunit.framework.dll')}" />

	<property name="nant.tasks.nunit2"
			value="False"
			unless="${property::exists('nant.tasks.nunit2')}" />	

	<target name="clean">
		<delete dir="bin" failonerror="false" />
	</target>

	<target name="init" depends="clean">
		<mkdir dir="bin" />
		<!-- <copy file="${antlr.runtime.dll}" todir="build" /> -->
	</target>

	<target name="build" depends="init,core.tests.run" />
	
	<target name="core.compile" depends="init">
		<!-- doc="${bin.dir}/${core.name}.xml" -->
		<csc 
			define="STRONG"
			target="library" 
			debug="${debug}"
			optimize="${optimize}"
			output="${bin.dir}/${core.assembly.name}">
			
			<sources basedir="${core.src.dir}" defaultexcludes="true">
				<includes name="**/*.cs" />
			</sources>
		</csc>
	</target>

	<target name="core.tests.compile" depends="core.compile">
		<csc 
			target="library" 
			debug="${debug}" 
			output="${bin.dir}/${core.test.assembly.name}">
			
			<sources basedir="${core.test.src.dir}" defaultexcludes="true">
				<includes name="**/*.cs" />
			</sources>

			<references>
				<include name="${nunit.framework.dll}" />
				<include name="${bin.dir}/${core.assembly.name}" />
			</references>
		</csc>
	</target>
	
	<target name="core.tests.run" depends="core.tests.compile">
		<nunit2 haltonerror="true" failonerror="true" haltonfailure="true">
			<formatter type="Plain" />
			<test assemblyname="${bin.dir}/${core.test.assembly.name}" />
		</nunit2>
	</target>
	
	<target name="dist">
		<zip zipfile="${core.name}.src.${version}.zip">
			<fileset basedir="${base.dir}">
				<include name="License.txt" />				
				<include name="Readme.txt" />				
				<include name="Changes.txt" />				
				<include name="*.build" />
				<include name="*.sln" />
				<include name="${core.src.dir}/**/*.*" />
				<include name="${core.test.src.dir}/**/*.*" />
				
				<exclude name="**/Debug/*" />
				<exclude name="**/obj/*" />
				<exclude name="**/*.user" />
				<exclude name="**/*.suo" />
			</fileset>
		</zip>

		<zip zipfile="${core.name}.bin.${version}.zip">
			<fileset basedir="${base.dir}">
				<include name="${bin.dir}/${core.assembly.name}" />				
				<include name="License.txt" />				
				<include name="Readme.txt" />				
				<include name="Changes.txt" />
				<include name="${core.name}.src.${version}.zip" />				
			</fileset>
		</zip>
		
	</target>

</project>