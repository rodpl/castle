
Microkernel
===========

- Allow registration of concrete classes as components
  (this is a core change)
  (try to infer the service by inspecting the interfaces. Its just an idea, screening by namespaces;
  if it fails, should go on without an interface to describe the service, although recommended,
  should not be required)

- Remove the Avalon dependency
  - Create another assembly which extends the microkernel and provide avalon
    compatibility
  - Remove the dynamic proxy dependency
  
- ComponentModel information must use a proprietary object model
  instead of using Avalon's

- Avalon version of Microkernel must extend ComponentModelBuilder to extract
  its semantic using a different approach (which is currently implemented by componentmodelbuilder)


Decisions to make
=================

- Create one more Microkernel extension to include the facilities idea 
  or move it to windsor

- Is the IInterceptedComponentBuilder enough for creating our orthogonally
  goal?
  Evaluate how aspect# would use/integrate to it


Windsor (better name!)
=======

- Move the facilities concept/capabilities to it
- Evaluate the sub containers idea (is it worthwhile?)


Aspect# integration
===================

- Probably the Aspect# needs to replace the IInterceptedComponentBuilder implementation
  on the kernel. This implementation is responsible for all proxy creating/handling
- Make Aspect#'s engine available somewhere like a component or something like that
  but ThreadSlot


Prevalence integration
======================

- License issues (Must be ASF compatible license)

- Try to create a simple layered desktop application using Castle and prevalence

- Try to create a simple web application using castle and prevalence

- As long as the components dont be proxied, this should be pretty straightforward


NHibernate/obj.net/iBatis integration
=====================================

- License issues (Must be ASF compatible license)

- Try to create a simple layered desktop application using Castle and one of those 
  frameworks

- Try to create a simple web application using castle and one of those frameworks
  frameworks

Future
======

- Presentation
  - Try to adapt ASP.Net (intercepting handlers, setting dependencies to them)
  - NVelocity
  - Controllers/views using Ruby on Rails idea


What to keep in mind:
=====================

- Avoid xml configurations, try to create self describing applications

- If external configuration is needed, keep it very simple and descriptive

- Check YAML as a reference to other formats or even build a better language 
  to configure applications (domain languages chapter of The Pragmatic Programmer)


Mono
==== 

Microkernel/Avalon should be ok
DynamicProxy doesnt work on 1.0.2 / ldtoken issue (need to state this on the website)



