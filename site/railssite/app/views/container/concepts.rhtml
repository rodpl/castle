<% @page_title = "MicroKernel" %>
<% @main_title = "Concepts and Metaphors" %>
<%= render "/container/deflinks" %>

Before diving into details of how to use the containers, its time to 
explain some concepts used:

<ul>
  <li>Component: a component is a smallest unit of functionality. 
  It exposes a service to the outside world. Please note that a
  component is not data. Its meaningless to register 
  something like a Value Object, for instance, in the container.
  Its strongly adviced that you use contracts for components, i.e., 
  interfaces to dictate the service.
</ul>
<ul>
  <li>Service: sometimes we can interchange 'component' by 'service', 
  but usually a service is the contract which a component exposes and
  implements. In practical terms its the interface exposed. 
</ul>
<ul>
  
  <li>Facility: A facility is registered on the kernel 
  and should extend the container by augmenting its support for
  components by subscribing to kernel events, hence having a chance
  to act on components.
</ul>
<ul>

  <li>SubSystem: A SubSystem is also registered on the kernel, but its role is different.
  The kernel actually uses subsystems to gather external information or implement a
  specific heuristic. Common examples are a configuration subsystem, which exposes to
  the kernel external configuration; and a lookup subsystem that tries to return a
  component mathing a specific criteria.
</ul>
  