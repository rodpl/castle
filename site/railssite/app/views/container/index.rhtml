<% @page_title = "Container" %>
<% @main_title = "Inversion of control" %>
<%= render "/container/deflinks" %>

What's that inversion of control hype all about? We agree its a hype nowadays,
but we've being involved with this principle as a way to create better applications 
for a long time before this hype, so please, don't think we're just another
project trying to ride the tide.

<p>
Inversion of control is a design principle - and not a pattern! - which
states that an entity should not actively obtain external entitites it needs 
to perform its work but instead expect that something else supplies these dependencies. 
</p>

<p>
By using properly this strategy, the benefits will be a loosely coupled
system, where components are interchangeable - provided that contracts are respected.
</p>
<p>
Other implicit consequences are:
<ul>
  <li>Reusability
  <li>Easier tests
  <li>Better division of responsability
</ul>
</p>

<h3>MicroKernel</h3>

<p>
Castle provides a very simple Kernel that implements the core of an 
inversion of control container. Its intended to be only a kernel so no
built-in support for external configuration is provided, for instance.
If you're looking for a more friendly container, see the below.

</p>

<h3>The Windsor</h3>

<p>
The Windsor container aggregates the Microkernel exposing a
friendly interface and provinding the
subsystems for external configurations and other commons helpers.
</p>

<h3>Some concepts</h3>

<p>
Before diving into details of how the kernel works, its time to 
explain some concepts used:

<ol>
  <li>Facility: A facility is registered in the kernel 
  and should extend the container by augmenting its support for
  components and subscribing to kernel events, hence having a chance
  to act on components being used.

  <li>SubSystem: A SubSystem is also registered in the kernel, but its role is different.
  The kernel actually uses subsystems to gather external information or implement a
  specific heuristic. Common examples are a configuration subsystem, which exposes to
  the kernel external configuration; and a lookup subsystem that tries to return a
  component mathing a specific criteria.
</ol>

</p>
