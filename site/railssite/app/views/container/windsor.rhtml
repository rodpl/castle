<% @page_title = "Windsor" %>
<% @main_title = "Windsor" %>
<%= render "/container/deflinks" %>

The Windsor container provides capabilites that
make things even easier, life external configuration
from Xml files or from the AppDomain related configuration
file.

<h3>Why another container?</h3>

<p>
If you are wondering why we've decided to 
offer the MicroKernel and the Windsor, the answer is:
separation of concerns. The MicroKernel concern is to offer an
extensible inversion of control container core. The Windsor
concern is to offer a facade to the kernel and deal with external 
configuration, proxies and profiles. 
</p>

<h3>How to use</h3>

<p>
The usage is similar to the use of the MicroKernel.
Windsor will, by default, try to obtain external configurations
from the AppDomain configuration file. If you'd like to use a different
source, you can create your own configuration store (by implementing 
the IConfigurationStore interface) or specifying one of those available.
</p>

<pre class="source">
// Will use app domain config
IWindsorContainer container = new WindsorContainer(); 

// Will use a xml file
IConfigurationStore store = 
	new XmlConfigurationStore("file.xml");
IWindsorContainer container = new WindsorContainer(store); 
</pre>

<h3>The configuration file</h3>

<p>
The configuration file is only necessary if you want to override
the behavior of a component, or if your components graph is 
complex and you'd like to give some hints about how the container 
should assemble it.
</p>
<p>
If you're using the AppDomainConfigurationStore, your configuration 
should look like the following
</p>

<pre class="source">
&lt;?xml version="1.0" encoding="utf-8" ?&gt; 

&lt;configuration&gt;

&lt;configSections&gt;
    &lt;section name="castle"
 type="Castle.Windsor.Configuration.AppDomain.CastleSectionHandler, 
  Castle.Windsor" /&gt;
&lt;/configSections&gt;

&lt;castle&gt;
	&lt;facilities&gt;

		&lt;facility id="testidengine"&gt;
			&lt;item&gt;value&lt;/item&gt;
		&lt;/facility&gt;

	&lt;/facilities&gt;

	&lt;components&gt;

		&lt;component id="testidcomponent1"&gt;
			&lt;item&gt;value1&lt;/item&gt;
		&lt;/component&gt;

	&lt;/components&gt;
&lt;/castle&gt;

&lt;/configuration&gt;

</pre>


<h3>Profiles</h3>

<p>
Profiles are being discussed. The idea is to provide a way to 
configure the kernel without the need of invoke AddComponent.
This is speacially important for large applications.
<p>


